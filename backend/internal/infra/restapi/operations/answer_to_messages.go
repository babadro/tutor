// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/babadro/tutor/internal/models"
	"github.com/babadro/tutor/internal/models/swagger"
)

// AnswerToMessagesHandlerFunc turns a function with the right signature into a answer to messages handler
type AnswerToMessagesHandlerFunc func(AnswerToMessagesParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn AnswerToMessagesHandlerFunc) Handle(params AnswerToMessagesParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// AnswerToMessagesHandler interface for that can handle valid answer to messages params
type AnswerToMessagesHandler interface {
	Handle(AnswerToMessagesParams, *models.Principal) middleware.Responder
}

// NewAnswerToMessages creates a new http.Handler for the answer to messages operation
func NewAnswerToMessages(ctx *middleware.Context, handler AnswerToMessagesHandler) *AnswerToMessages {
	return &AnswerToMessages{Context: ctx, Handler: handler}
}

/*
AnswerToMessages swagger:route POST /answer-to-messages answerToMessages

Answers to messages in the chat.

By default it takes most recent unanswered messages from the user and answers them.
*/
type AnswerToMessages struct {
	Context *middleware.Context
	Handler AnswerToMessagesHandler
}

func (o *AnswerToMessages) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAnswerToMessagesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AnswerToMessagesBody answer to messages body
//
// swagger:model AnswerToMessagesBody
type AnswerToMessagesBody struct {

	// The chat ID.
	// Required: true
	ChatID *string `json:"chatId"`
}

// Validate validates this answer to messages body
func (o *AnswerToMessagesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChatID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AnswerToMessagesBody) validateChatID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"chatId", "body", o.ChatID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this answer to messages body based on context it is used
func (o *AnswerToMessagesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AnswerToMessagesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AnswerToMessagesBody) UnmarshalBinary(b []byte) error {
	var res AnswerToMessagesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AnswerToMessagesOKBody answer to messages o k body
//
// swagger:model AnswerToMessagesOKBody
type AnswerToMessagesOKBody struct {

	// msg
	Msg *swagger.ChatMessage `json:"msg,omitempty"`
}

// Validate validates this answer to messages o k body
func (o *AnswerToMessagesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMsg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AnswerToMessagesOKBody) validateMsg(formats strfmt.Registry) error {
	if swag.IsZero(o.Msg) { // not required
		return nil
	}

	if o.Msg != nil {
		if err := o.Msg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("answerToMessagesOK" + "." + "msg")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this answer to messages o k body based on the context it is used
func (o *AnswerToMessagesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMsg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AnswerToMessagesOKBody) contextValidateMsg(ctx context.Context, formats strfmt.Registry) error {

	if o.Msg != nil {
		if err := o.Msg.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("answerToMessagesOK" + "." + "msg")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AnswerToMessagesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AnswerToMessagesOKBody) UnmarshalBinary(b []byte) error {
	var res AnswerToMessagesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
