// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/babadro/tutor/internal/models"
	"github.com/babadro/tutor/internal/models/swagger"
)

// CreateChatHandlerFunc turns a function with the right signature into a create chat handler
type CreateChatHandlerFunc func(CreateChatParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateChatHandlerFunc) Handle(params CreateChatParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// CreateChatHandler interface for that can handle valid create chat params
type CreateChatHandler interface {
	Handle(CreateChatParams, *models.Principal) middleware.Responder
}

// NewCreateChat creates a new http.Handler for the create chat operation
func NewCreateChat(ctx *middleware.Context, handler CreateChatHandler) *CreateChat {
	return &CreateChat{Context: ctx, Handler: handler}
}

/*
CreateChat swagger:route POST /chats createChat

Creates a new chat.

This endpoint creates a new chat.
*/
type CreateChat struct {
	Context *middleware.Context
	Handler CreateChatHandler
}

func (o *CreateChat) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateChatParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateChatBody create chat body
//
// swagger:model CreateChatBody
type CreateChatBody struct {

	// chat type
	ChatType swagger.ChatType `json:"chatType,omitempty"`

	// The timestamp of the chat.
	// Required: true
	Time *int64 `json:"time"`
}

// Validate validates this create chat body
func (o *CreateChatBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChatType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateChatBody) validateChatType(formats strfmt.Registry) error {
	if swag.IsZero(o.ChatType) { // not required
		return nil
	}

	if err := o.ChatType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "chatType")
		}
		return err
	}

	return nil
}

func (o *CreateChatBody) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"time", "body", o.Time); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create chat body based on the context it is used
func (o *CreateChatBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateChatType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateChatBody) contextValidateChatType(ctx context.Context, formats strfmt.Registry) error {

	if err := o.ChatType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "chatType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateChatBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateChatBody) UnmarshalBinary(b []byte) error {
	var res CreateChatBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateChatOKBody create chat o k body
//
// swagger:model CreateChatOKBody
type CreateChatOKBody struct {

	// The created chat.
	Chat *swagger.Chat `json:"chat,omitempty"`
}

// Validate validates this create chat o k body
func (o *CreateChatOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateChatOKBody) validateChat(formats strfmt.Registry) error {
	if swag.IsZero(o.Chat) { // not required
		return nil
	}

	if o.Chat != nil {
		if err := o.Chat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createChatOK" + "." + "chat")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create chat o k body based on the context it is used
func (o *CreateChatOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateChat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateChatOKBody) contextValidateChat(ctx context.Context, formats strfmt.Registry) error {

	if o.Chat != nil {
		if err := o.Chat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createChatOK" + "." + "chat")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateChatOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateChatOKBody) UnmarshalBinary(b []byte) error {
	var res CreateChatOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
