// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/babadro/tutor/internal/models"
)

// GetChatMessagesHandlerFunc turns a function with the right signature into a get chat messages handler
type GetChatMessagesHandlerFunc func(GetChatMessagesParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetChatMessagesHandlerFunc) Handle(params GetChatMessagesParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetChatMessagesHandler interface for that can handle valid get chat messages params
type GetChatMessagesHandler interface {
	Handle(GetChatMessagesParams, *models.Principal) middleware.Responder
}

// NewGetChatMessages creates a new http.Handler for the get chat messages operation
func NewGetChatMessages(ctx *middleware.Context, handler GetChatMessagesHandler) *GetChatMessages {
	return &GetChatMessages{Context: ctx, Handler: handler}
}

/*
GetChatMessages swagger:route GET /chat_messages/{chatId} getChatMessages

Get chat messages
*/
type GetChatMessages struct {
	Context *middleware.Context
	Handler GetChatMessagesHandler
}

func (o *GetChatMessages) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetChatMessagesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
