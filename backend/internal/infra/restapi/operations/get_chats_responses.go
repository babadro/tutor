// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/babadro/tutor/internal/models/swagger"
)

// GetChatsOKCode is the HTTP code returned for type GetChatsOK
const GetChatsOKCode int = 200

/*
GetChatsOK A list of chats

swagger:response getChatsOK
*/
type GetChatsOK struct {

	/*
	  In: Body
	*/
	Payload *GetChatsOKBody `json:"body,omitempty"`
}

// NewGetChatsOK creates GetChatsOK with default headers values
func NewGetChatsOK() *GetChatsOK {

	return &GetChatsOK{}
}

// WithPayload adds the payload to the get chats o k response
func (o *GetChatsOK) WithPayload(payload *GetChatsOKBody) *GetChatsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get chats o k response
func (o *GetChatsOK) SetPayload(payload *GetChatsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetChatsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetChatsBadRequestCode is the HTTP code returned for type GetChatsBadRequest
const GetChatsBadRequestCode int = 400

/*
GetChatsBadRequest Bad request

swagger:response getChatsBadRequest
*/
type GetChatsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *swagger.Error `json:"body,omitempty"`
}

// NewGetChatsBadRequest creates GetChatsBadRequest with default headers values
func NewGetChatsBadRequest() *GetChatsBadRequest {

	return &GetChatsBadRequest{}
}

// WithPayload adds the payload to the get chats bad request response
func (o *GetChatsBadRequest) WithPayload(payload *swagger.Error) *GetChatsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get chats bad request response
func (o *GetChatsBadRequest) SetPayload(payload *swagger.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetChatsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetChatsUnauthorizedCode is the HTTP code returned for type GetChatsUnauthorized
const GetChatsUnauthorizedCode int = 401

/*
GetChatsUnauthorized unauthorized

swagger:response getChatsUnauthorized
*/
type GetChatsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *swagger.Error `json:"body,omitempty"`
}

// NewGetChatsUnauthorized creates GetChatsUnauthorized with default headers values
func NewGetChatsUnauthorized() *GetChatsUnauthorized {

	return &GetChatsUnauthorized{}
}

// WithPayload adds the payload to the get chats unauthorized response
func (o *GetChatsUnauthorized) WithPayload(payload *swagger.Error) *GetChatsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get chats unauthorized response
func (o *GetChatsUnauthorized) SetPayload(payload *swagger.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetChatsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetChatsInternalServerErrorCode is the HTTP code returned for type GetChatsInternalServerError
const GetChatsInternalServerErrorCode int = 500

/*
GetChatsInternalServerError Internal server error

swagger:response getChatsInternalServerError
*/
type GetChatsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *swagger.Error `json:"body,omitempty"`
}

// NewGetChatsInternalServerError creates GetChatsInternalServerError with default headers values
func NewGetChatsInternalServerError() *GetChatsInternalServerError {

	return &GetChatsInternalServerError{}
}

// WithPayload adds the payload to the get chats internal server error response
func (o *GetChatsInternalServerError) WithPayload(payload *swagger.Error) *GetChatsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get chats internal server error response
func (o *GetChatsInternalServerError) SetPayload(payload *swagger.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetChatsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
GetChatsDefault error

swagger:response getChatsDefault
*/
type GetChatsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *swagger.Error `json:"body,omitempty"`
}

// NewGetChatsDefault creates GetChatsDefault with default headers values
func NewGetChatsDefault(code int) *GetChatsDefault {
	if code <= 0 {
		code = 500
	}

	return &GetChatsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get chats default response
func (o *GetChatsDefault) WithStatusCode(code int) *GetChatsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get chats default response
func (o *GetChatsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get chats default response
func (o *GetChatsDefault) WithPayload(payload *swagger.Error) *GetChatsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get chats default response
func (o *GetChatsDefault) SetPayload(payload *swagger.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetChatsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
