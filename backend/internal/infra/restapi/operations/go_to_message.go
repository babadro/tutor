// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/babadro/tutor/internal/models"
)

// GoToMessageHandlerFunc turns a function with the right signature into a go to message handler
type GoToMessageHandlerFunc func(GoToMessageParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GoToMessageHandlerFunc) Handle(params GoToMessageParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GoToMessageHandler interface for that can handle valid go to message params
type GoToMessageHandler interface {
	Handle(GoToMessageParams, *models.Principal) middleware.Responder
}

// NewGoToMessage creates a new http.Handler for the go to message operation
func NewGoToMessage(ctx *middleware.Context, handler GoToMessageHandler) *GoToMessage {
	return &GoToMessage{Context: ctx, Handler: handler}
}

/*
GoToMessage swagger:route POST /go-to-message goToMessage

Goes to a specific prepared message in the chat.

This endpoint goes to a specific prepared message in the chat.
*/
type GoToMessage struct {
	Context *middleware.Context
	Handler GoToMessageHandler
}

func (o *GoToMessage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGoToMessageParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GoToMessageBody go to message body
//
// swagger:model GoToMessageBody
type GoToMessageBody struct {

	// The chat ID.
	// Required: true
	ChatID *string `json:"chatId"`

	// The index of the message.
	// Required: true
	MsgIdx *int32 `json:"msgIdx"`
}

// Validate validates this go to message body
func (o *GoToMessageBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChatID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMsgIdx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GoToMessageBody) validateChatID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"chatId", "body", o.ChatID); err != nil {
		return err
	}

	return nil
}

func (o *GoToMessageBody) validateMsgIdx(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"msgIdx", "body", o.MsgIdx); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this go to message body based on context it is used
func (o *GoToMessageBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GoToMessageBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GoToMessageBody) UnmarshalBinary(b []byte) error {
	var res GoToMessageBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
