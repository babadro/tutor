// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/babadro/tutor/internal/models/swagger"
)

// GoToMessageOKCode is the HTTP code returned for type GoToMessageOK
const GoToMessageOKCode int = 200

/*
GoToMessageOK Successful response

swagger:response goToMessageOK
*/
type GoToMessageOK struct {

	/*
	  In: Body
	*/
	Payload *swagger.ChatMessage `json:"body,omitempty"`
}

// NewGoToMessageOK creates GoToMessageOK with default headers values
func NewGoToMessageOK() *GoToMessageOK {

	return &GoToMessageOK{}
}

// WithPayload adds the payload to the go to message o k response
func (o *GoToMessageOK) WithPayload(payload *swagger.ChatMessage) *GoToMessageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the go to message o k response
func (o *GoToMessageOK) SetPayload(payload *swagger.ChatMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GoToMessageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GoToMessageBadRequestCode is the HTTP code returned for type GoToMessageBadRequest
const GoToMessageBadRequestCode int = 400

/*
GoToMessageBadRequest Bad request

swagger:response goToMessageBadRequest
*/
type GoToMessageBadRequest struct {

	/*
	  In: Body
	*/
	Payload *swagger.Error `json:"body,omitempty"`
}

// NewGoToMessageBadRequest creates GoToMessageBadRequest with default headers values
func NewGoToMessageBadRequest() *GoToMessageBadRequest {

	return &GoToMessageBadRequest{}
}

// WithPayload adds the payload to the go to message bad request response
func (o *GoToMessageBadRequest) WithPayload(payload *swagger.Error) *GoToMessageBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the go to message bad request response
func (o *GoToMessageBadRequest) SetPayload(payload *swagger.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GoToMessageBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GoToMessageUnauthorizedCode is the HTTP code returned for type GoToMessageUnauthorized
const GoToMessageUnauthorizedCode int = 401

/*
GoToMessageUnauthorized unauthorized

swagger:response goToMessageUnauthorized
*/
type GoToMessageUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *swagger.Error `json:"body,omitempty"`
}

// NewGoToMessageUnauthorized creates GoToMessageUnauthorized with default headers values
func NewGoToMessageUnauthorized() *GoToMessageUnauthorized {

	return &GoToMessageUnauthorized{}
}

// WithPayload adds the payload to the go to message unauthorized response
func (o *GoToMessageUnauthorized) WithPayload(payload *swagger.Error) *GoToMessageUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the go to message unauthorized response
func (o *GoToMessageUnauthorized) SetPayload(payload *swagger.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GoToMessageUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GoToMessageInternalServerErrorCode is the HTTP code returned for type GoToMessageInternalServerError
const GoToMessageInternalServerErrorCode int = 500

/*
GoToMessageInternalServerError Internal server error

swagger:response goToMessageInternalServerError
*/
type GoToMessageInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *swagger.Error `json:"body,omitempty"`
}

// NewGoToMessageInternalServerError creates GoToMessageInternalServerError with default headers values
func NewGoToMessageInternalServerError() *GoToMessageInternalServerError {

	return &GoToMessageInternalServerError{}
}

// WithPayload adds the payload to the go to message internal server error response
func (o *GoToMessageInternalServerError) WithPayload(payload *swagger.Error) *GoToMessageInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the go to message internal server error response
func (o *GoToMessageInternalServerError) SetPayload(payload *swagger.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GoToMessageInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
GoToMessageDefault error

swagger:response goToMessageDefault
*/
type GoToMessageDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *swagger.Error `json:"body,omitempty"`
}

// NewGoToMessageDefault creates GoToMessageDefault with default headers values
func NewGoToMessageDefault(code int) *GoToMessageDefault {
	if code <= 0 {
		code = 500
	}

	return &GoToMessageDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the go to message default response
func (o *GoToMessageDefault) WithStatusCode(code int) *GoToMessageDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the go to message default response
func (o *GoToMessageDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the go to message default response
func (o *GoToMessageDefault) WithPayload(payload *swagger.Error) *GoToMessageDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the go to message default response
func (o *GoToMessageDefault) SetPayload(payload *swagger.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GoToMessageDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
