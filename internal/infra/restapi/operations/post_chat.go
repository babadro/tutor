// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostChatHandlerFunc turns a function with the right signature into a post chat handler
type PostChatHandlerFunc func(PostChatParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostChatHandlerFunc) Handle(params PostChatParams) middleware.Responder {
	return fn(params)
}

// PostChatHandler interface for that can handle valid post chat params
type PostChatHandler interface {
	Handle(PostChatParams) middleware.Responder
}

// NewPostChat creates a new http.Handler for the post chat operation
func NewPostChat(ctx *middleware.Context, handler PostChatHandler) *PostChat {
	return &PostChat{Context: ctx, Handler: handler}
}

/*
PostChat swagger:route POST /chat postChat

Sends a message to the AI and receives a response.

This endpoint receives a user's message and returns the AI's response.
*/
type PostChat struct {
	Context *middleware.Context
	Handler PostChatHandler
}

func (o *PostChat) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostChatParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostChatBody post chat body
//
// swagger:model PostChatBody
type PostChatBody struct {

	// The message text sent by the user.
	Message string `json:"message,omitempty"`

	// Unique identifier for the user.
	UserID string `json:"userId,omitempty"`
}

// Validate validates this post chat body
func (o *PostChatBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post chat body based on context it is used
func (o *PostChatBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostChatBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChatBody) UnmarshalBinary(b []byte) error {
	var res PostChatBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChatOKBody post chat o k body
//
// swagger:model PostChatOKBody
type PostChatOKBody struct {

	// AI's response to the user's message.
	Reply string `json:"reply,omitempty"`
}

// Validate validates this post chat o k body
func (o *PostChatOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post chat o k body based on context it is used
func (o *PostChatOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostChatOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChatOKBody) UnmarshalBinary(b []byte) error {
	var res PostChatOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
