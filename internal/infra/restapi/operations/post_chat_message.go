// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostChatMessageHandlerFunc turns a function with the right signature into a post chat message handler
type PostChatMessageHandlerFunc func(PostChatMessageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostChatMessageHandlerFunc) Handle(params PostChatMessageParams) middleware.Responder {
	return fn(params)
}

// PostChatMessageHandler interface for that can handle valid post chat message params
type PostChatMessageHandler interface {
	Handle(PostChatMessageParams) middleware.Responder
}

// NewPostChatMessage creates a new http.Handler for the post chat message operation
func NewPostChatMessage(ctx *middleware.Context, handler PostChatMessageHandler) *PostChatMessage {
	return &PostChatMessage{Context: ctx, Handler: handler}
}

/*
PostChatMessage swagger:route POST /chat_message postChatMessage

Sends a message to the AI and receives a response.

This endpoint receives a user's message and returns the AI's response.
*/
type PostChatMessage struct {
	Context *middleware.Context
	Handler PostChatMessageHandler
}

func (o *PostChatMessage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostChatMessageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostChatMessageBody post chat message body
//
// swagger:model PostChatMessageBody
type PostChatMessageBody struct {

	// The message text sent by the user.
	Message string `json:"message,omitempty"`

	// Unique identifier for the user.
	UserID string `json:"userId,omitempty"`
}

// Validate validates this post chat message body
func (o *PostChatMessageBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post chat message body based on context it is used
func (o *PostChatMessageBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostChatMessageBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChatMessageBody) UnmarshalBinary(b []byte) error {
	var res PostChatMessageBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChatMessageOKBody post chat message o k body
//
// swagger:model PostChatMessageOKBody
type PostChatMessageOKBody struct {

	// AI's response to the user's message.
	Reply string `json:"reply,omitempty"`
}

// Validate validates this post chat message o k body
func (o *PostChatMessageOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post chat message o k body based on context it is used
func (o *PostChatMessageOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostChatMessageOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChatMessageOKBody) UnmarshalBinary(b []byte) error {
	var res PostChatMessageOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
